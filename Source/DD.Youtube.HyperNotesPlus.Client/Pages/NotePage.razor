@inject INoteService NoteService
@page "/notes/{NoteId}"
@page "/notes/new"

@if (isLoading)
{
    <LoadingComponent />
}
else
{
    <NoteEditor Note="note" SavedHandler="OnSaved">

    </NoteEditor>
}


@code {

    [Parameter]
    public string NoteId { get; set; }

    private bool isLoading = false;
    private Note note;

    private async Task OnSaved(Note note)
    {
        if (note.Id != Guid.Empty)
        {
            await NoteService.Update(note.Id, note);
            Console.WriteLine("Updated!");
            Console.WriteLine($"Content = {note.Content}");
        }
        else
        {
            await NoteService.Create(note);
            Console.WriteLine("Created!");
            Console.WriteLine($"Content = {note.Content}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(NoteId)
            && Guid.TryParse(NoteId, out Guid noteId))
        {
            await LoadNote(noteId);
        }
        else
        {
            note = new Note();
        }
    }

    private async Task LoadNote(Guid id)
    {
        isLoading = true;
        note = await NoteService.GetNote(id);
        isLoading = false;
    }

}
